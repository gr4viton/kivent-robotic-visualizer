#:kivy 2.0.0
#:import path os.path
#:import dirname os.path.dirname
#:import main __main__
# :import TestGame py.test_game

# TestGame:

<TestGame>:
    gameworld: gameworld
    app: app
    
   # bg_color: 1,1,1,1
    #canvas.before:
     #   Color:
      #      rgba: self.bg_color
       # Rectangle:
        #    pos: self.pos
         #   size: self.size
    GameWorld:
        id: gameworld
        gamescreenmanager: gamescreenmanager
        size_of_gameworld: 100*1024
        zones: {'general': 20000, 'touch': 100}
        model_format_allocations: {'vertex_format_2f4ub': (150*1024, 150*1024),'vertex_format_4f': (150*1024, 150*1024) }

        PositionSystem2D:
            system_id: 'position'
            gameworld: gameworld
            zones: ['general', 'touch']

        RotateSystem2D:
            system_id: 'rotate'
            gameworld: gameworld
            zones: ['general']

        RotateRenderer:
            gameworld: gameworld
            zones: ['general']
            shader_source: path.join(dirname(dirname(path.abspath(main.__file__))), 'assets', 'glsl', 'positionrotateshader.glsl')

        Renderer:
            gameworld: gameworld
            system_id: 'renderer'
            zones: ['general']
            frame_count: 2
            updateable: True 
            force_update: True
 #           size_of_batches: 512
  #          size_of_component_block: 128
            shader_source: path.join(dirname(dirname(path.abspath(main.__file__))), 'assets', 'glsl', 'positionshader.glsl')


        PolyRenderer:
            id: 'poly_renderer'
            system_id: 'poly_renderer'
            gameworld: gameworld
            zones: ['general']
            frame_count: 2
            updateable: True
            shader_source:  path.join(dirname(dirname(path.abspath(main.__file__))), 'assets', 'glsl', 'positioncolorshader.glsl')

        RotatePolyRenderer:
            id: 'rotate_poly_renderer'
            system_id: 'rotate_poly_renderer'
            gameworld: gameworld
            zones: ['general']
            frame_count: 2
            updateable: True
            shader_source:  path.join(dirname(dirname(path.abspath(main.__file__))), 'assets', 'glsl', 'polyposcolorrotateshader.glsl')

        CymunkPhysics:
            gameworld: root.gameworld
            damping: root.app.damping
            zones: ['general']

        CymunkTouchSystem:
            gameworld: root.gameworld
            zones: ['touch']
            zone_to_use: 'touch'
            physics_system: 'cymunk_physics'
            ignore_groups: root.ignore_groups  #root.collision_types['ultrasound']
            touch_radius: 30
            max_force: 2500000*10
        
  #      SteeringSystem:
   #         gameworld: root.gameworld
    #        physics_system: 'cymunk_physics'
    #        zones: ['general']

    GameScreenManager:
        id: gamescreenmanager
        size: root.size
        pos: root.pos
        gameworld: gameworld

<GameScreenManager>:
    MainScreen:
        id: main_screen

<MainScreen@GameScreen>:
    name: 'main'
    FloatLayout:
        ControlPanel:
            cols: 1
            size_hint: (.25, 1)
            pos_hint: {'x': 0.75, 'y': 0}

<ColoredGridLayout@GridLayout>:
    bg_color: .1, .1, .7, .3
    padding: 3, 3, 3, 3
    spacing: 2
    pos: root.pos
    size: root.size
    canvas.before:
        Color:
            rgba: self.bg_color
        Rectangle:
            pos: self.pos
            size: self.size

<ControlPanel@ColoredGridLayout>:
 #   bg_color: .1, .1, .7, .5
    ScrollView: 
        min_move: 5
        do_scroll_x: 0
        StackLayout:

            InfoPanel

<ROTextInput@TextInput>:
    readonly: True
 #   size_hint: 1, 1 
 #   size_hint_y: 0.1

<ButtonS@Button>
 #   size_hint_y: 0.5

<InfoPanel@ColoredGridLayout>:
    cols: 1
    ToggleButton:
        text: 'Toggle robot mecanum control'
        on_state: app.root.toggle_robot_control(self.state == 'down')

    ButtonS:
        text: 'Draw poly obstacles'
        on_release: app.root.draw_obstacles()
    ButtonS:
        text: 'Draw rect obstacles'
        on_release: app.root.draw_rect_obstacles()

    ButtonS:
        text: 'Destroy obstacles'
        on_release: app.root.destroy_entities(skip_cat_list=['wall', 'robot', 'candy'])

    ButtonS:
        text: 'Set robot random'
        on_release: app.root.set_robots_rand()
    ButtonS:
        text: 'Apply impulse'
        on_release: app.root.kick_robots()

    ButtonS:
        text: 'Draw asteroids'
        on_release: app.root.draw_asteroids()
    ButtonS:
        text: 'Add robot'
        on_release: app.root.add_robot()
    ButtonS:
        text: 'Remove robot'
        on_release: app.root.remove_robot()

    #Button:
     #   text: 'Destroy all stuff'
      #  on_release: app.root.destroy_all_entities()

    DebugPanel

    TitledText:
        title: 'Objects count'
        text: str(app.ent_count)

    TitledText:
        title: 'Info'
        text: str(app.info_text)
    TitledText:
        title: 'ultrasounds'
        text: app.ultrasound_status
    TitledText:
        title: 'states'
        text: app.robot_states
#    TitledText
#    TitledText
#    TitledText
#    TitledText
#    TitledText
#    TitledText

<ScrollableLabel>:
    #text: 'text'
    Label:
        size_hint_y: None
        height: self.texture_size[1]
        text_size: self.width, None
        text: root.text

<TitledText@ColoredGridLayout>:
    text: 'text'
    title: 'title'
    multiline: True
    cols: 1
    Label:
        size_hint_y: 0.1
        text: root.title
   # ROTextInput:
    ScrollableLabel:
        text: root.text
        #multiline: root.multiline
 

<DebugPanel>:
    Label:
        pos: root.pos
        size: root.size
        #font_size: root.size[1]*.5
        halign: 'center'
        valign: 'middle'
        color: (1,1,1,1)
        text: 'FPS: ' + root.fps if root.fps != None else 'FPS:'
